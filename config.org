* System
** Emacs Settings
Increase garbage collection 
#+begin_src emacs-lisp
    (setq debug-on-error 1)
      (eval-and-compile
	(setq gc-cons-threshold 16777216
	      gc-cons-percentage 0.1))
#+end_src

#+RESULTS:
: 0.1

Disable byte compile warnings
#+begin_src emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+end_src

#+RESULTS:
| not | free-vars | unresolved | noruntime | lexical | make-local |

Smooth scrolling
#+begin_src emacs-lisp
(pixel-scroll-precision-mode 1)
#+end_src

#+RESULTS:
: t

The next block is taken from here: https://github.com/frap/emacs-literate
#+begin_src emacs-lisp
;;; Code:
;; menu shit remove
(mapc
 (lambda (mode)
   (when (fboundp mode)
     (funcall mode -1)))
 '(menu-bar-mode tool-bar-mode scroll-bar-mode))

;;; Initialisation
(setq inhibit-default-init t
      inhibit-startup-echo-area-message t
      inhibit-startup-screen t
      initial-scratch-message nil)

;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

(defconst gas-savefile-dir (expand-file-name "savefile" user-emacs-directory))

;; create the savefile dir if it doesn't exist
(unless (file-exists-p gas-savefile-dir)
  (make-directory gas-savefile-dir))

;;; UI
;; the blinking cursor is nothing, but an annoyance
(blink-cursor-mode -1)

;; disable the annoying bell ring
(setq ring-bell-function 'ignore)

;; disable startup screen
(setq inhibit-startup-screen t)

;; nice scrolling
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1
)

;; mode line settings
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)
;; enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

;; more useful frame title, that show either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

;; Productive default mode
(setq initial-major-mode 'org-mode)

;; When on a tab, make the cursor the tab length.
(setq-default x-stretch-cursor t)

;; Keep emacs Custom-settings in separate file.
;; (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
;; (when (file-exists-p custom-file)
;; (load custom-file))

;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; revert buffers automatically when underlying files are changed externally
(global-auto-revert-mode t)

;; Make backups of files, even when they're in version control.
(setq vc-make-backup-files t)

;; Fix empty pasteboard error.
(setq save-interprogram-paste-before-kill nil)

#+end_src

#+RESULTS:

** apperance
#+begin_src emacs-lisp
  (defun my/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (load-theme 'alect-light t))
      ('dark (load-theme 'alect-dark t))))

  (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+end_src

#+RESULTS:
| my/apply-theme |

** Font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-14" ))
  (set-face-attribute 'default t :font "JetBrains Mono-14")
#+end_src

#+RESULTS:

*** Jetbrains ligatures

#+begin_src emacs-lisp
  (defconst jetbrains-ligature-mode--ligatures
     '("-->" "//" "/**" "/*" "*/" "<!--" ":=" "->>" "<<-" "->" "<-"
       "<=>" "==" "!=" "<=" ">=" "=:=" "!==" "&&" "||" "..." ".."
       "|||" "///" "&&&" "===" "++" "--" "=>" "|>" "<|" "||>" "<||"
       "|||>" "<|||" ">>" "<<" "::=" "|]" "[|" "{|" "|}"
       "[<" ">]" ":?>" ":?" "/=" "[||]" "!!" "?:" "?." "::"
       "+++" "??" "###" "##" ":::" "####" ".?" "?=" "=!=" "<|>"
       "<:" ":<" ":>" ">:" "<>" "***" ";;" "/==" ".=" ".-" "__"
       "=/=" "<-<" "<<<" ">>>" "<=<" "<<=" "<==" "<==>" "==>" "=>>"
       ">=>" ">>=" ">>-" ">-" "<~>" "-<" "-<<" "=<<" "---" "<-|"
       "<=|" "/\\" "\\/" "|=>" "|~>" "<~~" "<~" "~~" "~~>" "~>"
       "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</>" "</" "/>"
       "<->" "..<" "~=" "~-" "-~" "~@" "^=" "-|" "_|_" "|-" "||-"
       "|=" "||=" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#="
       "&="))

  (sort jetbrains-ligature-mode--ligatures (lambda (x y) (> (length x) (length y))))

  (dolist (pat jetbrains-ligature-mode--ligatures)
    (set-char-table-range composition-function-table
			(aref pat 0)
			(nconc (char-table-range composition-function-table (aref pat 0))
			       (list (vector (regexp-quote pat)
					     0
					     'compose-gstring-for-graphic)))))
#+end_src

#+RESULTS:

** Frame size

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(height . 65))
  (add-to-list 'default-frame-alist '(width . 93))
  ;; (set-background-color "ivory")
  ;; Disable tool bar
  (tool-bar-mode -1)
  ;; Disable scroll bar
  (scroll-bar-mode -1)
#+end_src

#+RESULTS:

** Use fancy lambda
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

#+RESULTS:
: t

** Highligh the current line
#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

#+RESULTS:
: t

n* Sensible defaults
Most of those are copied from https://github.com/hrs/sensible-defaults.el/blob/main/sensible-defaults.el
For now I'm cherry picking what I want
#+begin_src emacs-lisp
    (global-font-lock-mode t)
    (setq visible-bell t)
  ;;  (setq ring-bell-function 'ignore)
#+end_src

#+RESULTS:
: t

** Packages
#+begin_src emacs-lisp
  (unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))
#+end_src
This package allow to use ~use-package~ with links to source

#+begin_src emacs-lisp
  (quelpa
 '(quelpa-use-package
   :fetcher git
   :url "https://github.com/quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)
#+end_src

* Completion
I choose Vertico due to its simplicity and being light weight
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+end_src

#+RESULTS:


This should make the history persistant when emcas restarts
#+begin_src emacs-lisp
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))
#+end_src

#+RESULTS:


Orderless give us completion based on substring matching instead of the default prefix matching

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+end_src

#+RESULTS:

* Searching and filtering
Check this article https://karthinks.com/software/avy-can-do-anything/
#+begin_src emacs-lisp
(use-package avy
:ensure t
:init
(global-set-key (kbd "M-j") 'avy-goto-char-timer)
)
#+end_src

#+RESULTS:

* Org
Wrap text
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

#+RESULTS:
| visual-line-mode | turn-on-org-cdlatex | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

This remove the emphasis markers like ~=,/,*~
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

#+RESULTS:
: t

This package replace the heading with UTF-8 symbols
#+begin_src emacs-lisp
(use-package org-superstar
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

#+RESULTS:
: t

Use proportional font with different sizes for the heading
#+begin_src emacs-lisp
  (let* ((variable-tuple
	    (cond                 
		  ((x-list-fonts "JetBrains Mono")  '(:font "JetBrains Mono"))
		  ((x-list-fonts "Arial")           '(:font "Arial"))
		  ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
		  ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
		  ((x-list-fonts "Verdana")         '(:font "Verdana"))
		  ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
		  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
	   (base-font-color     (face-foreground 'default nil 'default))
	   (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

      (custom-theme-set-faces
       'user
       `(org-level-8 ((t (,@headline ,@variable-tuple))))
       `(org-level-7 ((t (,@headline ,@variable-tuple))))
       `(org-level-6 ((t (,@headline ,@variable-tuple))))
       `(org-level-5 ((t (,@headline ,@variable-tuple))))
       `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
       `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.2))))
       `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.25))))
       `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.35))))
       `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil)))))
     )
#+end_src

#+RESULTS:

#+begin_src emacs-lisp

  ;; (custom-theme-set-faces
  ;;  'user
  ;;  '(variable-pitch ((t (:family "Arial" :height 150 :weight Normal))))
  ;;  '(fixed-pitch ((t ( :family "JetBrains Mono" :height 150))))
  ;;  '(org-block ((t (:inherit fixed-pitch))))
  ;;  '(org-code ((t (:inherit (shadow fixed-pitch)))))
  ;;  '(org-document-info ((t (:foreground "dark orange"))))
  ;;  '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
  ;;  '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
  ;;  '(org-link ((t (:foreground "royal blue" :underline t))))
  ;;  '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
  ;;  '(org-property-value ((t (:inherit fixed-pitch))) t)
  ;;  '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
  ;;  '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
  ;;  '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 1))))
  ;;  '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

  ;;   (add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

#+RESULTS:
Insert images from clipboard
#+begin_src emacs-lisp
  (use-package org-download
    :ensure t
    :after org
    :defer nil
    :custom
    (org-download-method 'directory)
    (org-download-image-dir "images")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d-%H%M%S_")
    (org-image-actual-width 300)
    (org-download-screenshot-method "/usr/local/bin/pngpaste %s")
    :bind
    ("C-M-y" . org-download-screenshot)
    :config
    (require 'org-download))
#+end_src

#+RESULTS:
: org-download-screenshot


#+begin_src emacs-lisp
;;  (add-hook 'org-cdlatex-mode-hook
;;	     (lambda ()
;;   (local-set-key (kbd "$") 'cdlatex-dollar)))
#+end_src

#+RESULTS:
| lambda | nil | (local-set-key (kbd $) 'cdlatex-dollar) |


#+begin_src emacs-lisp
(setq org-preview-latex-default-process 'dvyisvgm)
(setq org-latex-create-formula-image-program 'dvisvgm)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src

#+RESULTS:
| :foreground | default | :background | default | :scale | 2.0 | :html-foreground | Black | :html-background | Transparent | :html-scale | 1.0 | :matchers | (begin $1 $ $$ \( \[) |

** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/org-roam"))
  (org-roam-completation-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("b" "book" plain
      "* Title: %?\n\n ** Author: %?\n\n ** Year %?\n\n ** Description: %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     )
   )

  :bind (("C-c n l" . org-roam-buffer-toggle)
	 ("C-c n f" . org-roam-node-find)
	 ("C-c n g" . org-roam-graph)
	 ("C-c n i" . org-roam-node-insert)
	 ("C-c n c" . org-roam-capture)
	 ;; Dailies
	 ("C-c n j" . org-roam-dailies-capture-today)
	 :map org-mode-map
	 ("C-M-i" . completion-at-point))
  :config
  (org-roam-setup)
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))

    ;; (org-roam-dailies-directory "journals/")
    ;; (org-roam-capture-templates
    ;; '(("d" "default" plain
    ;;  #'org-roam-capture--get-point "%?"
    ;;  :file-name "pages/${slug}" :head "#+title: ${title}\n" :unnarrowed t))))

#+end_src

#+RESULTS:
: completion-at-point
* LaTeX
** AUCTEX
#+begin_src emacs-lisp
  (use-package latex
    :ensure auctex
    :hook ((LaTeX-mode . prettify-symbols-mode))
    :bind (:map LaTeX-mode-map
	   ("C-S-e" . latex-math-from-calc))
    :config
    ;; Format math as a Latex string with Calc
    (defun latex-math-from-calc ()
      "Evaluate `calc' on the contents of line at point."
      (interactive)
      (cond ((region-active-p)
	     (let* ((beg (region-beginning))
		    (end (region-end))
		    (string (buffer-substring-no-properties beg end)))
	       (kill-region beg end)
	       (insert (calc-eval `(,string calc-language latex
					    calc-prefer-frac t
					    calc-angle-mode rad)))))
	    (t (let ((l (thing-at-point 'line)))
		 (end-of-line 1) (kill-line 0) 
		 (insert (calc-eval `(,l
				      calc-language latex
				      calc-prefer-frac t
				      calc-angle-mode rad))))))))

   (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)
   (add-hook 'org-mode-hook #'turn-on-org-cdlatex)


#+end_src

#+RESULTS:
| (lambda nil (org-superstar-mode 1)) | visual-line-mode | turn-on-org-cdlatex | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | f |

#+begin_src emacs-lisp
  (set-default 'preview-scale-function 1.2)
#+end_src

#+RESULTS:
: 1.2
https://github.com/purcell/exec-path-from-shell
#+begin_src emacs-lisp
(setenv "PATH" (concat "/usr/local/texlive/2022/bin/universal-darwin:" (getenv "PATH")))
(setq exec-path (append '("/usr/local/texlive/2022/bin/universal-darwin:") exec-path))
#+end_src

#+RESULTS:
| /usr/local/texlive/2022/bin/universal-darwin: | /usr/local/texlive/2022/bin/universal-darwin: | /Applications/Visual Studio Code.app/Contents/Resources/app/bin | /opt/homebrew/bin | /opt/homebrew/sbin | /usr/local/bin | /usr/bin | /bin | /usr/sbin | /sbin | /Library/Apple/usr/bin | /opt/homebrew/Cellar/emacs-plus@29/29.0.50/libexec/emacs/29.0.50/aarch64-apple-darwin21.3.0 |

Add more symbols to ~cdlatex-math-symbol-alist~, make sure to ~cdlatex-reset-mode~ if the list is modifed after cdlatex has been loaded

#+begin_src emacs-lisp
  (setq cdlatex-env-alist '(
	("axiom" "\\begin{axiom}\nAUTOLABEL\n?\n\\end{axiom}\n" nil)
	("theorem" "\\begin{theorem}\nAUTOLABEL\n?\n\\end{theorem}\n" nil)
	("definition" "\\begin{definition}\nAUTOLABEL\n?\n\\end{definition}\n" nil)
	("remark" "\\begin{remark}\nAUTOLABEL\n?\n\\end{remark}\n" nil)
	("lemma" "\\begin{lemma}\nAUTOLABEL\n?\n\\end{lemma}\n" nil)
	("corollary" "\\begin{corollary}\nAUTOLABEL\n?\n\\end{corollary}\n" nil)
	("proof" "\\begin{proof}\nAUTOLABEL\n?\n\\end{proof}\n" nil)
	("example" "\\begin{example}\nAUTOLABEL\n?\n\\end{example}\n" nil)

	))

  (setq cdlatex-command-alist '(
	("axm" "Insert axiom env"   "" cdlatex-environment ("axiom") t nil)
	("thr" "Insert theorem env" "" cdlatex-environment ("theorem") t nil)
	("def" "Insert definition env" "" cdlatex-environment ("definition") t nil)
	("rem" "Insert remark env" "" cdlatex-environment ("remark") t nil)
	("lem" "Insert lemma env" "" cdlatex-environment ("lemma") t nil)
	("cor" "Insert corollary env" "" cdlatex-environment ("corollary") t nil)
	("pro" "Insert proof env" "" cdlatex-environment ("proof") t nil)
	("ex" "Insert example env" "" cdlatex-environment ("example") t nil)

	))
#+end_src

#+begin_src emacs-lisp
  (setq cdlatex-math-symbol-alist '(
		(?n  ("\\nu" "\\lnot" "\\ln"))
		))
  (require 'cdlatex)
#+end_src

** Math delimiters
#+begin_src emacs-lisp
  (use-package math-delimiters
    :quelpa (math-delimiters :fetcher github :repo "oantolin/math-delimiters")
    :init
    (with-eval-after-load 'latex
    (define-key LaTeX-mode-map "$" #'math-delimiters-insert))
    (with-eval-after-load 'org
    (define-key org-mode-map "$" #'math-delimiters-insert))
    )
#+end_src

** Fast latex previews in Org
#+begin_src emacs-lisp
  (use-package org-auctex
    :quelpa (org-auctex :fetcher github :repo "/karthink/org-auctex")
    )
#+end_src

* Spell checker
#+begin_src emacs-lisp
  (use-package flycheck-languagetool
  :ensure t
  :hook ((text-mode . flycheck-languagetool-setup)
	 (org-mode . flycheck-languagetool-setup))
  :init
  (setq flycheck-languagetool-url "http://localhost:8010")
  (setq flycheck-languagetool-server-port "8010")
  )

#+end_src
#+RESULTS:
| flycheck-languagetool-setup | (lambda nil (org-superstar-mode 1)) | visual-line-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |




* Feeds
#+begin_src emacs-lisp
  (use-package elfeed
  :ensure t
  :hook ((text-mode . flycheck-languagetool-setup)
	 (org-mode . flycheck-languagetool-setup))
  :init
  (run-at-time nil (* 8 60 60) #'elfeed-update)
  (global-set-key (kbd "C-x w") 'elfeed)
  )

  (use-package elfeed-org
  :ensure t
  :init
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
  )
#+end_src

from https://cundy.me/post/elfeed/

# #+begin_src emacs-lisp
#       (defun concatenate-authors (authors-list)
#       "Given AUTHORS-LIST, list of plists; return string of all authors
#     concatenated."
#       (mapconcat
#        (lambda (author) (plist-get author :name))
#        authors-list ", "))
  
#     (defun my-search-print-fn (entry)
#     "Print ENTRY to the buffer."
#     (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
# 	   (title (or (elfeed-meta entry :title)
# 		      (elfeed-entry-title entry) ""))
# 	   (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
# 	   (feed (elfeed-entry-feed entry))
# 	   (feed-title
# 	    (when feed
# 	      (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
# 	   (entry-authors (concatenate-authors
# 			   (elfeed-meta entry :authors)))
# 	   (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
# 	   (tags-str (mapconcat
# 		      (lambda (s) (propertize s 'face
# 					      'elfeed-search-tag-face))
# 		      tags ","))
# 	   (title-width (+ (window-width) 10
# 			   elfeed-search-trailing-width))
# 	   (title-column (elfeed-format-column
# 			  title (elfeed-clamp
# 				 elfeed-search-title-min-width
# 				 title-width
# 				 140)
# 			  :left))
# 	   (authors-width 135)
# 	   (authors-column (elfeed-format-column
# 			  entry-authors (elfeed-clamp
# 				 elfeed-search-title-min-width
# 				 authors-width
# 				 131)
# 			  :left)))

#       (insert (propertize date 'face 'elfeed-search-date-face) " ")

#       (insert (propertize title-column
# 			  'face title-faces 'kbd-help title) " ")

#       (insert (propertize authors-column
# 			  'face 'elfeed-search-date-face
# 			  'kbd-help entry-authors) " ")

#       ;; (when feed-title
#       ;;   (insert (propertize entry-authors
#       ;; 'face 'elfeed-search-feed-face) " "))

#       (when entry-authors
# 	(insert (propertize feed-title
# 			    'face 'elfeed-search-feed-face) " "))

#       ;; (when tags
#       ;;   (insert "(" tags-str ")"))

#       )
#     )
#   (setq elfeed-search-print-entry-function #'my-search-print-fn)
# #+end_src

#+begin_src emacs-lisp
  
(defun slot/arXiv ()
  (interactive)
  (elfeed-search-set-filter "+unread +arXiv")
  (elfeed-score-score-search))

(defun slot/elfeed-print-entry (entry)
  (if (string-match-p "+arXiv" elfeed-search-filter)
      (slot/arXiv-print-entry entry)
    (elfeed-search-print-entry--default entry)))

(defun slot/arXiv-print-entry (entry)
  "Pretty print arXiv entries.
Implementation mostly stolen from elfeed's default printing
function; i.e., `elfeed-search-print-entry--default'."
  (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))

         (title (or (elfeed-meta entry :title)
                    (elfeed-entry-title entry) ""))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (title-column (elfeed-format-column title 80 :left))

         (entry-authors (s-join ", "
                                (--map (plist-get it :name)
                                       (elfeed-meta entry :authors))))
         (authors-column (elfeed-format-column entry-authors 52 :left))

         (score (elfeed-format-column
                 (format "%s" (elfeed-score-scoring-get-score-from-entry entry))
                 4 :left))

         (feed (elfeed-entry-feed entry))
         (feed-column (let ((ft (or (elfeed-meta feed :title)
                                    (elfeed-feed-title feed))))
                        (elfeed-format-column
                         (cond ((s-matches? "math.AT" ft) "Algebraic Topology")
                               ((s-matches? "math.CT" ft) "Category Theory")
                               ((s-matches? "math.KT" ft) "Homological Algebra")
                               ((s-matches? "math.QA" ft) "Quantum Algebra"))
                         (1- (length "Homological Algebra"))
                         :left))))
    (insert (propertize date 'face 'elfeed-search-date-face) " ")
    (insert (propertize title-column 'face title-faces 'kbd-help title) " ")
    (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
    (insert (propertize authors-column 'kbd-help entry-authors) " ")
    (insert score " ")))

(setq elfeed-search-print-entry-function #'slot/arXiv-print-entry)

#+end_src

** Scoring
#+begin_src emacs-lisp
  (use-package elfeed-score
  :ensure t
  :config
  (progn
    (elfeed-score-enable)
    (define-key elfeed-search-mode-map "=" elfeed-score-map)))
#+end_src
